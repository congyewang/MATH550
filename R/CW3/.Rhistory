cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
fit_j
(-runif(n) * (1.592*10^56)^5)^(1/5)
(runif(n) * (1.592*10^56)^5)^(1/5)
(-runif(n) * (1.592*10^56)^5)^(-1/5)
-runif(n)
(runif(n) * (1.592*10^56)^5)^(-1/5)
(runif(n) * (1.592*10^56)^5)^(-1/5)
set.seed(1)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- (runif(n) * (1.592*10^56)^5)^(-1/5)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
ll <- function(para, datavec) {
# alpha:para[1]
# beta:para[2]
a <- para[1]
b <- para[2]
z <- sum(
log(
(b * a^b) / (datavec^(b+1))
)
)
return(-z)
}
fit_h <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = parrot, hessian = T)
fit_h
(runif(n) * (1.592*10^56)^53)^(-1/53)
(runif(n) * (1.592*10^56)^53)^(-1/53)
(runif(n) * (1.592*10^56)^53)^(-1/53)
(-runif(n) * (1.592*10^56)^53)^(-1/53)
(-runif(n) * (1.592*10^56)^53)^(-1/53)
(-runif(n) * (1.592*10^56)^53)^(-1/53)
(-runif(n) * (1.592*10^56)^53)^(-1/53)
random.uniform(-3.0,3.0)
runif(-3.0,3.0)
runif(10)
runif(10, min = -3, max = 3)
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
standard_normal_rand()
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
for (i in 1:n) {
standard_normal_rand()
}
for (i in 1:n) {
standard_normal_rand()
}
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
z <- rep(0, n)
for (i in 1:n) {
z[i] <- standard_normal_rand()
}
z
hist(z)
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
z <- rep(0, 100000)
for (i in 1:100000) {
z[i] <- standard_normal_rand()
}
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = -3.0, max = 3.0)
if (Y < pnorm(X)){
return(X)
}
}
}
z <- rep(0, 100000)
for (i in 1:100000) {
z[i] <- standard_normal_rand()
}
hist(z)
hist(z)
#X = runif(10, min = -3, max = 3)
#Y = runif(10, min = -3, max = 3)
standard_normal_rand <- function() {
while(TRUE){
X = runif(1, min = -3.0, max = 3.0)
Y = runif(1, min = 0, max = 0.5)
if (Y < pnorm(X)){
return(X)
}
}
}
z <- rep(0, 100000)
for (i in 1:100000) {
z[i] <- standard_normal_rand()
}
hist(z)
hist(z)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
set.seed(1)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
# hist(newLambda_i)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
set.seed(1)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
# hist(newLambda_i)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
set.seed(1)
nboot <- 50000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
set.seed(1)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
# hist(newLambda_i)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
set.seed(2)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
# hist(newLambda_i)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
ll <- function(para, datavec) {
# alpha:para[1]
# beta:para[2]
a <- para[1]
b <- para[2]
z <- sum(
log(
(b * a^b) / (datavec^(b+1))
)
)
return(-z)
}
fit_h <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = parrot, hessian = T)
fit_h
ll <- function(para, datavec) {
# alpha:para[1]
# beta:para[2]
a <- para[1]
b <- para[2]
z <- sum(
log(
(b * a^b) / (datavec^(b+1))
)
)
return(-z)
}
fit_h <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = parrot, hessian = T)
fit_h
ll <- function(para, datavec) {
# alpha:para[1]
# beta:para[2]
a <- para[1]
b <- para[2]
z <- sum(
log(
(b * a^b) / (datavec^(b+1))
)
)
return(-z)
}
fit_h <- optim(c(569503, 5), ll, method = "Nelder-Mead", datavec = parrot, hessian = T)
ll <- function(para, datavec) {
# alpha:para[1]
# beta:para[2]
a <- para[1]
b <- para[2]
z <- sum(
log(
(b * a^b) / (datavec^(b+1))
)
)
return(-z)
}
fit_h <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = parrot, hessian = T)
fit_h
newAlpha
set.seed(2)
nboot <- 5000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
hist(newAlpha)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
set.seed(2)
nboot <- 10000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
hist(newAlpha)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
set.seed(1)
nboot <- 10000
newAlpha <- rep(0, nboot)
newBeta <- rep(0, nboot)
n <- length(parrot)
for (i in 1:nboot) {
newData <- sample(parrot, n, replace = T)
fit_j <- optim(c(10, 5), ll, method = "Nelder-Mead", datavec = newData, hessian = T)
newAlpha[i] <- fit_j$par[1]
newBeta[i] <- fit_j$par[2]
}
hist(newAlpha)
seAlpha <- sd(newAlpha)
cat(" seAlpha: ", seAlpha, "\n")
ciAlpha <- quantile(newAlpha, c(0.025, 0.975))
cat("ciAlpha: [", ciAlpha[1], ",", ciAlpha[2], "]\n", sep = "")
library(lubridate)
setwd("~/R/MATH550/CW3")
df_1 <- read.csv("Australia_severe_storms_1975-2015.csv", header = T)
df_1$Date.Time
dmy_hm(df_1$Date.Time)
